import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer tokens;
	
	static int N, r, c, N2;
	static int cnt; // 방문 순서
	public static void main(String[] args) throws IOException {
		tokens = new StringTokenizer(input.readLine());
		
		N = Integer.parseInt(tokens.nextToken());
		N2 = 1<<N;
		r = Integer.parseInt(tokens.nextToken())+1;
		c = Integer.parseInt(tokens.nextToken())+1;
		
		findZ(N2, N2, N2);
		
		System.out.println(cnt-1);
	}
	
	static void findZ(int N, int nr, int nc) {
//		System.out.println(N+" : "+cnt+" ("+nr+","+nc+")");
		if(N == 2) {
			if(nr-1 == r && nc-1 == c) {
				cnt+=1;
			}else if(nr-1 == r && nc == c) {
				cnt+=2;
			}else if(nr == r && nc-1 ==c) {
				cnt+=3;
			}else if(nr == r && nc == c) {
				cnt+=4;
			}
			
			return;
		}
		
		int half = N/2; // 현재 영역에서 4등분 했을 때 한변의 길이
		int dr=0;
		int dc =0;
		// 4등분 했을 때 각 영역의 끝 좌표로 nr과 nc가 속하는 영역 좁히기
		// 1사분면
		if( r <= nr-half && c <= nc-half) {
			dr = nr-half;
			dc = nc-half;
			
		//2사분면
		}else if( r <= nr-half && nc-half< c && c<= nc) {
			dr =  nr-half;
			dc = nc;
			cnt += half*half;
		
		// 3사분면
		}else if(nr-half < r && r <= nr && c <= nc-half) {
			dr = nr;
			dc = nc-half;
			cnt += half*half*2;
		}else {
			dr = nr;
			dc = nc;
			cnt += half*half*3;
		}
		
		findZ(half, dr, dc);
	}
	
	
	
}
